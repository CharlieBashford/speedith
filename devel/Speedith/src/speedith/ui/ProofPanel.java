/*
 *   Project: Speedith
 * 
 * File name: ProofPanel.java
 *    Author: Matej Urbas [matej.urbas@gmail.com]
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package speedith.ui;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import speedith.core.reasoning.*;
import speedith.core.reasoning.args.RuleArg;

/**
 *
 * @author Matej Urbas [matej.urbas@gmail.com]
 */
public class ProofPanel extends javax.swing.JPanel implements Proof {
    
    // <editor-fold defaultstate="collapsed" desc="Fields">
    private ArrayList<Goals> goals = new ArrayList<Goals>();
    private ArrayList<RuleApplication> ruleApplications = new ArrayList<RuleApplication>();
    // </editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructors">
    /**
     * Creates new form ProofPanel
     */
    public ProofPanel() {
        initComponents();
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Proof Interface Implementation">
    public void applyRule(InferenceRule<? extends RuleArg> rule) throws RuleApplicationException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    public <TRuleArg extends RuleArg> void applyRule(InferenceRule<? super TRuleArg> rule, TRuleArg args) throws RuleApplicationException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    public Goals getGoalsAt(int index) {
        return goals.get(index);
    }
    
    public int getGoalsCount() {
        return goals.size();
    }
    
    public Goals getInitialGoals() {
        return goals.isEmpty() ? null : goals.get(0);
    }
    
    public Goals getLastGoals() {
        return goals.isEmpty() ? null : goals.get(goals.size() - 1);
    }

    public List<Goals> getGoals() {
        return Collections.unmodifiableList(goals);
    }

    public List<RuleApplication> getRuleApplications() {
        return Collections.unmodifiableList(ruleApplications);
    }

    public RuleApplication getRuleApplicationAt(int index) {
        return ruleApplications.get(index);
    }

    public int getRuleApplicationCount() {
        return ruleApplications.size();
    }

    public boolean isFinished() {
        final Goals lastGoals = getLastGoals();
        return lastGoals == null || lastGoals.isEmpty();
    }
    //</editor-fold>
}
