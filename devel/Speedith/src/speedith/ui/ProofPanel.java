/*
 *   Project: Speedith
 * 
 * File name: ProofPanel.java
 *    Author: Matej Urbas [matej.urbas@gmail.com]
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package speedith.ui;

import java.util.List;
import speedith.core.reasoning.*;
import speedith.core.reasoning.args.RuleArg;

/**
 *
 * @author Matej Urbas [matej.urbas@gmail.com]
 */
public class ProofPanel extends javax.swing.JPanel implements Proof {

    // <editor-fold defaultstate="collapsed" desc="Fields">
    private ProofTrace proof;
    // </editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructors">
    /**
     * Creates a new proof panel with no goals.
     */
    public ProofPanel() {
        this((Goals) null);
    }

    /**
     * Creates a new proof panel with the given goals.
     *
     * @param initialGoals the initial goals (the theorem we want to prove).
     * <p><span style="font-weight:bold">Note</span>: this parameter may be {@code null}
     * in which case no goals will be displayed and no proof will be
     * applicable.</p>
     */
    public ProofPanel(Goals initialGoals) {
        initComponents();

        // Create a proof trace for initial goals.
        proof = new ProofTrace(initialGoals);
        // Refresh the user interface (present all the current goals and the
        // rule applications)...
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Proof Interface Implementation">
    public void applyRule(InferenceRule<? extends RuleArg> rule) throws RuleApplicationException {
        applyRule(rule, null);
    }

    public <TRuleArg extends RuleArg> void applyRule(InferenceRule<? super TRuleArg> rule, TRuleArg args) throws RuleApplicationException {
        proof.applyRule(rule, args);
        // TODO: Refresh the GUI. Add a new set of goal panels and step description labels.
    }

    public boolean undoStep() {
        final boolean didUndo = proof.undoStep();
        if (didUndo) {
            // TODO: Refresh the GUI. Remove the last set of goals and step description labels.
        }
        return didUndo;
    }

    public Goals getGoalsAt(int index) {
        return proof.getGoalsAt(index);
    }

    public int getGoalsCount() {
        return proof.getGoalsCount();
    }

    public Goals getInitialGoals() {
        return proof.getInitialGoals();
    }

    public Goals getLastGoals() {
        return proof.getLastGoals();
    }

    public List<Goals> getGoals() {
        return proof.getGoals();
    }

    public List<RuleApplication> getRuleApplications() {
        return proof.getRuleApplications();
    }

    public RuleApplication getRuleApplicationAt(int index) {
        return proof.getRuleApplicationAt(index);
    }

    public int getRuleApplicationCount() {
        return proof.getRuleApplicationCount();
    }

    public boolean isFinished() {
        return proof.isFinished();
    }
    //</editor-fold>
}
