/*
 *   Project: Speedith
 * 
 * File name: TextSDInputDialog.java
 *    Author: Matej Urbas [matej.urbas@gmail.com]
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package speedith.ui.input;

import speedith.core.lang.SpiderDiagram;
import speedith.core.lang.reader.SpiderDiagramsReader;
import speedith.i18n.Translations;

/**
 *
 * @author Matej Urbas [matej.urbas@gmail.com]
 */
public class TextSDInputDialog extends javax.swing.JDialog {

    // <editor-fold defaultstate="collapsed" desc="Fields">
    private boolean cancelled = true;
    private SpiderDiagram spiderDiagram = null;
    // </editor-fold>

    /**
     * Creates new form TextSDInputDialog
     */
    public TextSDInputDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblInputText = new javax.swing.JLabel();
        spInputText = new javax.swing.JScrollPane();
        taInputText = new javax.swing.JTextArea();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblErrorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("speedith/i18n/strings"); // NOI18N
        setTitle(bundle.getString("TEXT_INPUT_DIALOG_TITLE")); // NOI18N

        lblInputText.setText(bundle.getString("TEXT_INPUT_DIALOG_LBL_INPUT")); // NOI18N

        taInputText.setColumns(20);
        taInputText.setRows(5);
        spInputText.setViewportView(taInputText);

        btnOk.setMnemonic(java.util.ResourceBundle.getBundle("speedith/i18n/strings").getString("TEXT_INPUT_DIALOG_OK_MNEMONIC").charAt(0));
        btnOk.setText(bundle.getString("TEXT_INPUT_DIALOG_OK")); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setMnemonic(java.util.ResourceBundle.getBundle("speedith/i18n/strings").getString("TEXT_INPUT_DIALOG_CANCEL_MNEMONIC").charAt(0));
        btnCancel.setText(bundle.getString("TEXT_INPUT_DIALOG_CANCEL")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblErrorMessage.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        lblErrorMessage.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spInputText, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblInputText)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblErrorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOk)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInputText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spInputText, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel)
                    .addComponent(lblErrorMessage))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        String sdText = taInputText.getText();
        try {
            spiderDiagram = SpiderDiagramsReader.readSpiderDiagram(sdText);
            cancelled = false;
            dispose();
        } catch (Exception ex) {
            lblErrorMessage.setText(Translations.i18n("TEXT_INPUT_DIALOG_INVALID_SD_TEXT", ex.getLocalizedMessage()));
        }
    }//GEN-LAST:event_btnOkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextSDInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextSDInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextSDInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextSDInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TextSDInputDialog dialog = new TextSDInputDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblInputText;
    private javax.swing.JScrollPane spInputText;
    private javax.swing.JTextArea taInputText;
    // End of variables declaration//GEN-END:variables

    /**
     * Indicates whether the user pressed the cancel button.
     *
     * <p>If this method returns {@code false} then a valid spider diagram will
     * be set in {@link TextSDInputDialog#getSpiderDiagram()}.</p>
     *
     * @return a value that indicates whether the user pressed the cancel
     * button.
     */
    public boolean isCancelled() {
        return cancelled;
    }

    /**
     * The spider diagram that will be converted to text and which in turn will
     * be passed to {@link TextSDInputDialog#setSpiderDiagramText(java.lang.String)
     * }.
     *
     * @param sd the spider diagram that will be converted to text and which in
     * turn will be passed to {@link TextSDInputDialog#setSpiderDiagramText(java.lang.String)
     * }.
     */
    public void setSpiderDiagramText(SpiderDiagram sd) {
        if (sd == null) {
            setSpiderDiagramText("");
        } else {
            setSpiderDiagramText(sd.toString());
        }
    }

    /**
     * Sets the text that will be displayed in the central text area of this
     * dialog. This text represents the user's input spider diagram.
     *
     * @param text the text that will be displayed in the central text area of
     * this dialog.
     */
    public void setSpiderDiagramText(String text) {
        taInputText.setText(text);
    }

    /**
     * Returns the spider diagram as represented by the text at the time when
     * the user pressed the 'Okay' button.
     *
     * @return the spider diagram as represented by the text at the time when
     * the user pressed the 'Okay' button.
     */
    public SpiderDiagram getSpiderDiagram() {
        return spiderDiagram;
    }
}
